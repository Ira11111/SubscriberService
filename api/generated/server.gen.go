// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package generated

import (
	"fmt"
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handler.
type ServerInterface interface {
	// Subscription list
	// (GET /subscriptions)
	GetSubscriptions(w http.ResponseWriter, r *http.Request, params GetSubscriptionsParams)
	// Create new subscription
	// (POST /subscriptions)
	PostSubscriptions(w http.ResponseWriter, r *http.Request)
	// Subscription with user list
	// (GET /subscriptions/users)
	GetSubscriptionsUsers(w http.ResponseWriter, r *http.Request, params GetSubscriptionsUsersParams)
	// Create new subscription for user
	// (POST /subscriptions/users)
	PostSubscriptionsUsers(w http.ResponseWriter, r *http.Request)
	// Subscriptions with user by user id
	// (GET /subscriptions/users/{user_id})
	GetSubscriptionsUsersUserId(w http.ResponseWriter, r *http.Request, userId IdUserParam, params GetSubscriptionsUsersUserIdParams)
	// Subscription total sum
	// (GET /subscriptions/users/{user_id}/total)
	GetSubscriptionsUsersUserIdTotal(w http.ResponseWriter, r *http.Request, userId IdUserParam, params GetSubscriptionsUsersUserIdTotalParams)
	// Delete subscription
	// (DELETE /subscriptions/{sub_id})
	DeleteSubscriptionsSubId(w http.ResponseWriter, r *http.Request, subId IdSubParam)
	// Subscription by id
	// (GET /subscriptions/{sub_id})
	GetSubscriptionsSubId(w http.ResponseWriter, r *http.Request, subId IdSubParam)
	// Update subscription
	// (PUT /subscriptions/{sub_id})
	PutSubscriptionsSubId(w http.ResponseWriter, r *http.Request, subId IdSubParam)
	// Subscription with user by subscription id
	// (GET /subscriptions/{sub_id}/users)
	GetSubscriptionsSubIdUsers(w http.ResponseWriter, r *http.Request, subId IdSubParam, params GetSubscriptionsSubIdUsersParams)
	// Delete user subscription
	// (DELETE /subscriptions/{sub_id}/users/{user_id})
	DeleteSubscriptionsSubIdUsersUserId(w http.ResponseWriter, r *http.Request, subId IdSubParam, userId IdUserParam)
	// Subscription with user by subscription and user IDs
	// (GET /subscriptions/{sub_id}/users/{user_id})
	GetSubscriptionsSubIdUsersUserId(w http.ResponseWriter, r *http.Request, subId IdSubParam, userId IdUserParam)
	// Update user subscription
	// (PUT /subscriptions/{sub_id}/users/{user_id})
	PutSubscriptionsSubIdUsersUserId(w http.ResponseWriter, r *http.Request, subId IdSubParam, userId IdUserParam)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Subscription list
// (GET /subscriptions)
func (_ Unimplemented) GetSubscriptions(w http.ResponseWriter, r *http.Request, params GetSubscriptionsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create new subscription
// (POST /subscriptions)
func (_ Unimplemented) PostSubscriptions(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Subscription with user list
// (GET /subscriptions/users)
func (_ Unimplemented) GetSubscriptionsUsers(w http.ResponseWriter, r *http.Request, params GetSubscriptionsUsersParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create new subscription for user
// (POST /subscriptions/users)
func (_ Unimplemented) PostSubscriptionsUsers(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Subscriptions with user by user id
// (GET /subscriptions/users/{user_id})
func (_ Unimplemented) GetSubscriptionsUsersUserId(w http.ResponseWriter, r *http.Request, userId IdUserParam, params GetSubscriptionsUsersUserIdParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Subscription total sum
// (GET /subscriptions/users/{user_id}/total)
func (_ Unimplemented) GetSubscriptionsUsersUserIdTotal(w http.ResponseWriter, r *http.Request, userId IdUserParam, params GetSubscriptionsUsersUserIdTotalParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete subscription
// (DELETE /subscriptions/{sub_id})
func (_ Unimplemented) DeleteSubscriptionsSubId(w http.ResponseWriter, r *http.Request, subId IdSubParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Subscription by id
// (GET /subscriptions/{sub_id})
func (_ Unimplemented) GetSubscriptionsSubId(w http.ResponseWriter, r *http.Request, subId IdSubParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update subscription
// (PUT /subscriptions/{sub_id})
func (_ Unimplemented) PutSubscriptionsSubId(w http.ResponseWriter, r *http.Request, subId IdSubParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Subscription with user by subscription id
// (GET /subscriptions/{sub_id}/users)
func (_ Unimplemented) GetSubscriptionsSubIdUsers(w http.ResponseWriter, r *http.Request, subId IdSubParam, params GetSubscriptionsSubIdUsersParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete user subscription
// (DELETE /subscriptions/{sub_id}/users/{user_id})
func (_ Unimplemented) DeleteSubscriptionsSubIdUsersUserId(w http.ResponseWriter, r *http.Request, subId IdSubParam, userId IdUserParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Subscription with user by subscription and user IDs
// (GET /subscriptions/{sub_id}/users/{user_id})
func (_ Unimplemented) GetSubscriptionsSubIdUsersUserId(w http.ResponseWriter, r *http.Request, subId IdSubParam, userId IdUserParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update user subscription
// (PUT /subscriptions/{sub_id}/users/{user_id})
func (_ Unimplemented) PutSubscriptionsSubIdUsersUserId(w http.ResponseWriter, r *http.Request, subId IdSubParam, userId IdUserParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) GetSubscriptions(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSubscriptionsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "sub_name" -------------

	err = runtime.BindQueryParameter("form", true, false, "sub_name", r.URL.Query(), &params.SubName)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sub_name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSubscriptions(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) PostSubscriptions(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostSubscriptions(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSubscriptionsUsers operation middleware
func (siw *ServerInterfaceWrapper) GetSubscriptionsUsers(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSubscriptionsUsersParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "start_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "start_date", r.URL.Query(), &params.StartDate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "start_date", Err: err})
		return
	}

	// ------------- Optional query parameter "end_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "end_date", r.URL.Query(), &params.EndDate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "end_date", Err: err})
		return
	}

	// ------------- Optional query parameter "sub_name" -------------

	err = runtime.BindQueryParameter("form", true, false, "sub_name", r.URL.Query(), &params.SubName)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sub_name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSubscriptionsUsers(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostSubscriptionsUsers operation middleware
func (siw *ServerInterfaceWrapper) PostSubscriptionsUsers(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostSubscriptionsUsers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSubscriptionsUsersUserId operation middleware
func (siw *ServerInterfaceWrapper) GetSubscriptionsUsersUserId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId IdUserParam

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", chi.URLParam(r, "user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSubscriptionsUsersUserIdParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "start_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "start_date", r.URL.Query(), &params.StartDate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "start_date", Err: err})
		return
	}

	// ------------- Optional query parameter "end_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "end_date", r.URL.Query(), &params.EndDate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "end_date", Err: err})
		return
	}

	// ------------- Optional query parameter "sub_name" -------------

	err = runtime.BindQueryParameter("form", true, false, "sub_name", r.URL.Query(), &params.SubName)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sub_name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSubscriptionsUsersUserId(w, r, userId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSubscriptionsUsersUserIdTotal operation middleware
func (siw *ServerInterfaceWrapper) GetSubscriptionsUsersUserIdTotal(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId IdUserParam

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", chi.URLParam(r, "user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSubscriptionsUsersUserIdTotalParams

	// ------------- Optional query parameter "start_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "start_date", r.URL.Query(), &params.StartDate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "start_date", Err: err})
		return
	}

	// ------------- Optional query parameter "end_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "end_date", r.URL.Query(), &params.EndDate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "end_date", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSubscriptionsUsersUserIdTotal(w, r, userId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteSubscriptionsSubId operation middleware
func (siw *ServerInterfaceWrapper) DeleteSubscriptionsSubId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "sub_id" -------------
	var subId IdSubParam

	err = runtime.BindStyledParameterWithOptions("simple", "sub_id", chi.URLParam(r, "sub_id"), &subId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sub_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSubscriptionsSubId(w, r, subId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSubscriptionsSubId operation middleware
func (siw *ServerInterfaceWrapper) GetSubscriptionsSubId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "sub_id" -------------
	var subId IdSubParam

	err = runtime.BindStyledParameterWithOptions("simple", "sub_id", chi.URLParam(r, "sub_id"), &subId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sub_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSubscriptionsSubId(w, r, subId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutSubscriptionsSubId operation middleware
func (siw *ServerInterfaceWrapper) PutSubscriptionsSubId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "sub_id" -------------
	var subId IdSubParam

	err = runtime.BindStyledParameterWithOptions("simple", "sub_id", chi.URLParam(r, "sub_id"), &subId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sub_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutSubscriptionsSubId(w, r, subId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSubscriptionsSubIdUsers operation middleware
func (siw *ServerInterfaceWrapper) GetSubscriptionsSubIdUsers(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "sub_id" -------------
	var subId IdSubParam

	err = runtime.BindStyledParameterWithOptions("simple", "sub_id", chi.URLParam(r, "sub_id"), &subId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sub_id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSubscriptionsSubIdUsersParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "start_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "start_date", r.URL.Query(), &params.StartDate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "start_date", Err: err})
		return
	}

	// ------------- Optional query parameter "end_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "end_date", r.URL.Query(), &params.EndDate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "end_date", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSubscriptionsSubIdUsers(w, r, subId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteSubscriptionsSubIdUsersUserId operation middleware
func (siw *ServerInterfaceWrapper) DeleteSubscriptionsSubIdUsersUserId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "sub_id" -------------
	var subId IdSubParam

	err = runtime.BindStyledParameterWithOptions("simple", "sub_id", chi.URLParam(r, "sub_id"), &subId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sub_id", Err: err})
		return
	}

	// ------------- Path parameter "user_id" -------------
	var userId IdUserParam

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", chi.URLParam(r, "user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSubscriptionsSubIdUsersUserId(w, r, subId, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSubscriptionsSubIdUsersUserId operation middleware
func (siw *ServerInterfaceWrapper) GetSubscriptionsSubIdUsersUserId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "sub_id" -------------
	var subId IdSubParam

	err = runtime.BindStyledParameterWithOptions("simple", "sub_id", chi.URLParam(r, "sub_id"), &subId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sub_id", Err: err})
		return
	}

	// ------------- Path parameter "user_id" -------------
	var userId IdUserParam

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", chi.URLParam(r, "user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSubscriptionsSubIdUsersUserId(w, r, subId, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutSubscriptionsSubIdUsersUserId operation middleware
func (siw *ServerInterfaceWrapper) PutSubscriptionsSubIdUsersUserId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "sub_id" -------------
	var subId IdSubParam

	err = runtime.BindStyledParameterWithOptions("simple", "sub_id", chi.URLParam(r, "sub_id"), &subId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sub_id", Err: err})
		return
	}

	// ------------- Path parameter "user_id" -------------
	var userId IdUserParam

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", chi.URLParam(r, "user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutSubscriptionsSubIdUsersUserId(w, r, subId, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/subscriptions", wrapper.GetSubscriptions)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/subscriptions", wrapper.PostSubscriptions)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/subscriptions/users", wrapper.GetSubscriptionsUsers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/subscriptions/users", wrapper.PostSubscriptionsUsers)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/subscriptions/users/{user_id}", wrapper.GetSubscriptionsUsersUserId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/subscriptions/users/{user_id}/total", wrapper.GetSubscriptionsUsersUserIdTotal)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/subscriptions/{sub_id}", wrapper.DeleteSubscriptionsSubId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/subscriptions/{sub_id}", wrapper.GetSubscriptionsSubId)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/subscriptions/{sub_id}", wrapper.PutSubscriptionsSubId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/subscriptions/{sub_id}/users", wrapper.GetSubscriptionsSubIdUsers)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/subscriptions/{sub_id}/users/{user_id}", wrapper.DeleteSubscriptionsSubIdUsersUserId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/subscriptions/{sub_id}/users/{user_id}", wrapper.GetSubscriptionsSubIdUsersUserId)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/subscriptions/{sub_id}/users/{user_id}", wrapper.PutSubscriptionsSubIdUsersUserId)
	})

	return r
}
